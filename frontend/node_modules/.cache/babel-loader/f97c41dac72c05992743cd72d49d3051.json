{"ast":null,"code":"var _jsxFileName = \"/home/raushan/Desktop/houser-frontend/Houser/houser-frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch('http://127.0.0.1:8000/api/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      history.push('/');\n    } else {\n      alert('Something went wrong!');\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    history.push('/login');\n  }; // let updateToken = async ()=> {\n  //     let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n  //         method:'POST',\n  //         headers:{\n  //             'Content-Type':'application/json'\n  //         },\n  //         body:JSON.stringify({'refresh':authTokens?.refresh})\n  //     })\n  //     let data = await response.json()\n  //     if (response.status === 200){\n  //         setAuthTokens(data)\n  //         setUser(jwt_decode(data.access))\n  //         localStorage.setItem('authTokens', JSON.stringify(data))\n  //     }else{\n  //         logoutUser()\n  //     }\n  //     if(loading){\n  //         setLoading(false)\n  //     }\n  // }\n\n\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    setAuthTokens: setAuthTokens,\n    setUser: setUser,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  useEffect(() => {\n    if (authTokens) {\n      setUser(jwt_decode(authTokens.access));\n    }\n\n    setLoading(false);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"aBbTXfZfqHsHQ1PD0tesWqDhSTA=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/raushan/Desktop/houser-frontend/Houser/houser-frontend/src/context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useHistory","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","history","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","data","json","status","access","setItem","push","alert","logoutUser","removeItem","contextData"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from 'react'\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom'\n\nconst AuthContext = createContext()\n\nexport default AuthContext;\n\n\nexport const AuthProvider = ({children}) => {\n    let [authTokens, setAuthTokens] = useState(()=> localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\n    let [user, setUser] = useState(()=> localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\n    let [loading, setLoading] = useState(true)\n\n    const history = useHistory()\n\n    let loginUser = async (e )=> {\n        e.preventDefault()\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\n            method:'POST',\n            headers:{\n                'Content-Type':'application/json'\n            },\n            body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\n        })\n        let data = await response.json()\n\n        if(response.status === 200){\n            setAuthTokens(data)\n            setUser(jwt_decode(data.access))\n            localStorage.setItem('authTokens', JSON.stringify(data))\n            history.push('/')\n        }else{\n            alert('Something went wrong!')\n        }\n    }\n\n\n    let logoutUser = () => {\n        setAuthTokens(null)\n        setUser(null)\n        localStorage.removeItem('authTokens')\n        history.push('/login')\n    }\n\n\n    // let updateToken = async ()=> {\n\n    //     let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n    //         method:'POST',\n    //         headers:{\n    //             'Content-Type':'application/json'\n    //         },\n    //         body:JSON.stringify({'refresh':authTokens?.refresh})\n    //     })\n\n    //     let data = await response.json()\n        \n    //     if (response.status === 200){\n    //         setAuthTokens(data)\n    //         setUser(jwt_decode(data.access))\n    //         localStorage.setItem('authTokens', JSON.stringify(data))\n    //     }else{\n    //         logoutUser()\n    //     }\n\n    //     if(loading){\n    //         setLoading(false)\n    //     }\n    // }\n\n    let contextData = {\n        user:user,\n        authTokens:authTokens,\n        setAuthTokens:setAuthTokens,\n        setUser:setUser,\n        loginUser:loginUser,\n        logoutUser:logoutUser,\n    }\n\n\n    useEffect(()=> {\n\n        if(authTokens){\n            setUser(jwt_decode(authTokens.access))\n        }\n        setLoading(false)\n\n\n    }, [authTokens, loading])\n\n    return(\n        <AuthContext.Provider value={contextData} >\n            {loading ? null : children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}