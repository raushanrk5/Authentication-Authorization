{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://localhost:8000/auth/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config; // if (typeof error.response === 'undefined') {\n  // \talert(\n  // \t\t'A server/network error occurred. ' +\n  // \t\t\t'Looks like CORS might be the problem. ' +\n  // \t\t\t'Sorry about this - we will get it fixed shortly.'\n  // \t);\n  // \treturn Promise.reject(error);\n  // }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'jwt/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n      console.log(tokenParts); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/jwt/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh); //check about this\n\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/home/raushan/Desktop/houser-frontend/Houser/houser-frontend/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","status","url","window","location","href","Promise","reject","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","console","log","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'http://localhost:8000/auth/';\n\nconst axiosInstance = axios.create({\n\tbaseURL: baseURL,\n\ttimeout: 5000,\n\theaders: {\n\t\tAuthorization: localStorage.getItem('access_token')\n\t\t\t? 'JWT ' + localStorage.getItem('access_token')\n\t\t\t: null,\n\t\t'Content-Type': 'application/json',\n\t\taccept: 'application/json',\n\t}, \n});\n\naxiosInstance.interceptors.response.use(\n\t(response) => {\n\t\treturn response;\n\t},\n\tasync function (error) {\n\t\tconst originalRequest = error.config;\n\n\t\t// if (typeof error.response === 'undefined') {\n\t\t// \talert(\n\t\t// \t\t'A server/network error occurred. ' +\n\t\t// \t\t\t'Looks like CORS might be the problem. ' +\n\t\t// \t\t\t'Sorry about this - we will get it fixed shortly.'\n\t\t// \t);\n\t\t// \treturn Promise.reject(error);\n\t\t// }\n\n\t\tif (\n\t\t\terror.response.status === 401 &&\n\t\t\toriginalRequest.url === baseURL + 'jwt/refresh/'\n\t\t) {\n\t\t\twindow.location.href = '/login/';\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.data.code === 'token_not_valid' &&\n\t\t\terror.response.status === 401 &&\n\t\t\terror.response.statusText === 'Unauthorized'\n\t\t) {\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n\n\t\t\tif (refreshToken) {\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n                console.log(tokenParts);\n\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n\t\t\t\tconsole.log(tokenParts.exp);\n\n\t\t\t\tif (tokenParts.exp > now) {\n\t\t\t\t\treturn axiosInstance\n\t\t\t\t\t\t.post('/jwt/refresh/', { refresh: refreshToken })\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh); //check about this\n\n\t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\n\t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n\t\t\t\t\twindow.location.href = '/login/';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Refresh token not available.');\n\t\t\t\twindow.location.href = '/login/';\n\t\t\t}\n\t\t}\n\n\t\t// specific error handling done elsewhere\n\t\treturn Promise.reject(error);\n\t}\n);\n\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}